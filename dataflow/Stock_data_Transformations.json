{
	"name": "Stock_data_Transformations",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_target",
						"type": "DatasetReference"
					},
					"name": "final"
				}
			],
			"transformations": [
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "RemoveColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "cast1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Prop_0 as string,",
				"          Date as string,",
				"          Open as string,",
				"          High as string,",
				"          Low as string,",
				"          Close as string,",
				"          {Adj Close} as string,",
				"          Volume as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 derive(Open = toFloat(Open),",
				"          High = toFloat(High),",
				"          Low = toFloat(Low),",
				"          Close = toFloat(Close),",
				"          {Adj Close} = toDouble({Adj Close}),",
				"          Volume = toInteger(Volume)) ~> ModifyColumns1",
				"ModifyColumns1 select(mapColumn(",
				"          Date,",
				"          Open,",
				"          High,",
				"          Low,",
				"          Close,",
				"          {Adj Close},",
				"          Volume,",
				"          each(match(name!='Prop_0'&&name!='{_c0}'))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
				"RemoveColumns1 cast(output(",
				"          Date as date",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 aggregate(groupBy(Date),",
				"     Difference = sum(Close) - sum(Open)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          passengercount as integer,",
				"          SumTripDistance as double,",
				"          AvgTripDistance as double",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['output.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> final"
			]
		}
	}
}